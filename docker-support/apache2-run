#!/bin/bash
set -e

# Note: we don't just use "apache2ctl" here because it itself is just a shell-script wrapper around apache2 which provides extra functionality like "apache2ctl start" for launching apache2 in the background.
# (also, when run as "apache2ctl <apache args>", it does not use "exec", which leaves an undesirable resident shell process)

: "${APACHE_CONFDIR:=/etc/apache2}"
: "${APACHE_ENVVARS:=$APACHE_CONFDIR/envvars}"
if test -f "$APACHE_ENVVARS"; then
	. "$APACHE_ENVVARS"
fi

# Apache gets grumpy about PID files pre-existing
: "${APACHE_RUN_DIR:=/var/run/apache2}"
: "${APACHE_PID_FILE:=$APACHE_RUN_DIR/apache2.pid}"
rm -f "$APACHE_PID_FILE"

# create missing directories
# (especially APACHE_RUN_DIR, APACHE_LOCK_DIR, and APACHE_LOG_DIR)
for e in "${!APACHE_@}"; do
	if [[ "$e" == *_DIR ]] && [[ "${!e}" == /* ]]; then
		# handle "/var/lock" being a symlink to "/run/lock", but "/run/lock" not existing beforehand, so "/var/lock/something" fails to mkdir
		#   mkdir: cannot create directory '/var/lock': File exists
		dir="${!e}"
		while [ "$dir" != "$(dirname "$dir")" ]; do
			dir="$(dirname "$dir")"
			if [ -d "$dir" ]; then
				break
			fi
			absDir="$(readlink -f "$dir" 2>/dev/null || :)"
			if [ -n "$absDir" ]; then
				mkdir -p "$absDir"
			fi
		done

		mkdir -p "${!e}"
	fi
done

shutdown_handler()
{
    echo "Caught signal, sending $1 to webserver"
    kill -"$1" $(cat "${APACHE_PID_FILE}")
}

# Catch special apache2 signals appropriately
trap 'shutdown_handler SIGWINCH' INT  # apache2 graceful shutdown
trap 'shutdown_handler SIGUSR1' USR1  # graceful restart

# Pass other signals directly to apache2
trap 'shutdown_handler SIGKILL' KILL
trap 'shutdown_handler SIGTERM' TERM
trap 'shutdown_handler SIGSTOP' STOP
trap 'shutdown_handler SIGHUP' HUP

# Start apache2 in a separate pgid so resizing the terminal doesn't kill it
# apache2 isn't designed to be run in the foreground, so it overloads
# SIGWINCH and uses this as a graceful shutdown signal
# https://httpd.apache.org/docs/2.4/stopping.html
# https://stackoverflow.com/questions/780853/what-is-in-apache-2-a-caught-sigwinch-error
setsid -f -- apache2 -DFOREGROUND "$@"
sleep 2
tail --pid $(cat "${APACHE_PID_FILE}") -f /dev/null 2>&1 > /dev/null
